4

Folgende Antworten wurden erwartet und dienen als Grundlage für die Beurteilung:

 1. x sei eine Referenz auf einen Knoten (Typ Node) in einer einfach verketteten Liste
    mit mindestens einem existierenden Nachfolger (in der Objektvariablen next).
    Welche der folgenden Anweisungs-Sequenzen entfernen den direkten Nachfolger von x
    aus einer Liste, ändern sonst aber nichts?

    Falsch:  x.next.next = x.next.next.next;
    Falsch:  x.next.next.next = x.next.next;
    Falsch:  Node d = x.next; d = d.next;
    Richtig: x.next = x.next.next;
    Richtig: Node d = x.next; x.next = d.next;

 2. Welche der folgenden Aussagen stimmen in Bezug auf Datenabstraktion?

    Richtig: Datenkapselung und Data-Hiding sind für Datenabstraktion nötig.
    Falsch:  Data-Hiding behindert die Datenabstraktion.
    Falsch:  Kommentare sind in abstrakten Datentypen bedeutungslos.
    Falsch:  Datenabstraktion verhindert Änderungen von Objektzuständen.
    Richtig: Datenkapselung fügt Variablen und Methoden zu einer Einheit zusammen.

 3. x, y und z seien Objektreferenzen ungleich null.
    Welche der folgenden Bedingungen müssen für jede Implementierung der Methoden
    boolean equals(Object obj)  und  int hashCode()  in Java gelten?

    Richtig: Aus  x.hashCode() != y.hashCode()  folgt  !x.equals(y).
    Richtig: Aus  x.equals(y)  folgt  x.hashCode() == y.hashCode().
    Richtig: Aus  x.equals(y)  und  x.equals(z)  folgt  y.equals(z).
    Richtig: Aus  !x.equals(y)  folgt  !y.equals(x).
    Richtig: Aus  x.equals(y)  folgt  y.equals(x).

 4. a sei eine Variable mit einer leeren assoziativen Datenstruktur, wobei Schlüssel
    und Werte vom Typ String sind (und null sein können).  X und Y seien zwei
    voneinander verschiedene String-Konstanten (static final).  Nach welchen der
    folgenden Aufruf-Sequenzen liefert  a.get(X)  den String in  Y  als Ergebnis?

    Richtig: a.put(X, X); a.put(Y, Y); a.put(a.get(X), a.get(Y));
    Richtig: a.put(Y, X); a.put(X, Y); a.put(a.get(Y), a.get(X));
    Falsch:  a.put(X, X); a.put(Y, Y); a.put(a.get(Y), a.get(X));
    Richtig: a.put(Y, X); a.put(a.get(Y), a.get(X)); a.put(X, Y);
    Richtig: a.put(X, Y); a.put(Y, X); a.put(a.get(X), a.get(Y));

 5. T sei ein Referenztyp (Klasse oder Interface), und x sei eine durch
    R x = new S();  deklarierte Variable, wobei der Compiler keinen Fehler meldet.
    Welche der folgenden Aussagen treffen für alle passenden R, S, T und x zu?

    Richtig: Mit S ist Untertyp von T gilt:  ((T)x).getClass() == S.class
    Falsch:  Mit S ist Untertyp von T gilt:  ((T)x).getClass() == T.class
    Richtig: (T)x  liefert Laufzeitfehler wenn S nicht Untertyp von T ist.
    Falsch:  (T)x  liefert Laufzeitfehler wenn T nicht Untertyp von R ist.
    Falsch:  (T)x  ändert den dynamischen Typ von x auf T.


Die Multiple-Choice-Fragen wurden folgendermaßen beantwortet
(das sind nur Ihre Antworten, keine Aussage über Korrektheit):

 1. x sei eine Referenz auf einen Knoten (Typ Node) in einer einfach verketteten Liste
    mit mindestens einem existierenden Nachfolger (in der Objektvariablen next).
    Welche der folgenden Anweisungs-Sequenzen entfernen den direkten Nachfolger von x
    aus einer Liste, ändern sonst aber nichts?
    
    ?:        x.next.next = x.next.next.next;
    ?:        x.next.next.next = x.next.next;
    ?:        Node d = x.next; d = d.next;
    ?:        x.next = x.next.next;
    ?:        Node d = x.next; x.next = d.next;

 2. Welche der folgenden Aussagen stimmen in Bezug auf Datenabstraktion?
    
    ?:        Datenkapselung und Data-Hiding sind für Datenabstraktion nötig.
    ?:        Data-Hiding behindert die Datenabstraktion.
    ?:        Kommentare sind in abstrakten Datentypen bedeutungslos.
    ?:        Datenabstraktion verhindert Änderungen von Objektzuständen.
    ?:        Datenkapselung fügt Variablen und Methoden zu einer Einheit zusammen.

 3. x, y und z seien Objektreferenzen ungleich null.
    Welche der folgenden Bedingungen müssen für jede Implementierung der Methoden
    boolean equals(Object obj)  und  int hashCode()  in Java gelten?
    
    Falsch:   Aus  x.hashCode() != y.hashCode()  folgt  !x.equals(y).
    Falsch:   Aus  x.equals(y)  folgt  x.hashCode() == y.hashCode().
    Falsch:   Aus  x.equals(y)  und  x.equals(z)  folgt  y.equals(z).
    Falsch:   Aus  !x.equals(y)  folgt  !y.equals(x).
    Falsch:   Aus  x.equals(y)  folgt  y.equals(x).

 4. a sei eine Variable mit einer leeren assoziativen Datenstruktur, wobei Schlüssel
    und Werte vom Typ String sind (und null sein können).  X und Y seien zwei
    voneinander verschiedene String-Konstanten (static final).  Nach welchen der
    folgenden Aufruf-Sequenzen liefert  a.get(X)  den String in  Y  als Ergebnis?
    
    Falsch:   a.put(X, X); a.put(Y, Y); a.put(a.get(X), a.get(Y));
    Falsch:   a.put(Y, X); a.put(X, Y); a.put(a.get(Y), a.get(X));
    Falsch:   a.put(X, X); a.put(Y, Y); a.put(a.get(Y), a.get(X));
    Falsch:   a.put(Y, X); a.put(a.get(Y), a.get(X)); a.put(X, Y);
    Falsch:   a.put(X, Y); a.put(Y, X); a.put(a.get(X), a.get(Y));

 5. T sei ein Referenztyp (Klasse oder Interface), und x sei eine durch
    R x = new S();  deklarierte Variable, wobei der Compiler keinen Fehler meldet.
    Welche der folgenden Aussagen treffen für alle passenden R, S, T und x zu?
    
    Falsch:   Mit S ist Untertyp von T gilt:  ((T)x).getClass() == S.class
    Falsch:   Mit S ist Untertyp von T gilt:  ((T)x).getClass() == T.class
    Falsch:   (T)x  liefert Laufzeitfehler wenn S nicht Untertyp von T ist.
    Falsch:   (T)x  liefert Laufzeitfehler wenn T nicht Untertyp von R ist.
    Falsch:   (T)x  ändert den dynamischen Typ von x auf T.
